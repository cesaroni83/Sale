@page "/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@* @using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
 *@
@* @inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender*@
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@* @inject IdentityRedirectManager RedirectManager
 *@

       <div class="login-componente">
            <div class="container active">
                <div class="form-box register">
                    
                        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                        <h1>Registration</h1>
                       
                        <div class="input-box">
                            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                            <i class='bx bxs-envelope'></i>
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>
                        <div class="input-box">
                            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Password" />
                            <i class='bx bxs-lock'></i>
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>
                        <div class="input-box">
                            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Confirma Password" />
                            <i class='bx bxs-lock'></i>
                            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                        </div>
                        <button type="submit" class="bnt">Register</button>
                       
                    </EditForm>

                </div>
                <div class="toggle-box">
                    <div class="toggle-panel toggle-right">
                        <h1>Welcome Back</h1>
                        <p>Already have an Account?</p>
                        <Button Type="ButtonType.Link" class="bnt login-btn" Color="ButtonColor.Primary" To="/Login"> Login </Button>
                        
                    </div>
                </div>
            </div>
        
    @* <div class="col-md-4 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div> *@
 </div>
@code {
    // private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    // private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
     {
    //     var user = CreateUser();

    //     await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
    //     var emailStore = GetEmailStore();
    //     await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
    //     var result = await UserManager.CreateAsync(user, Input.Password);

    //     if (!result.Succeeded)
    //     {
    //         identityErrors = result.Errors;
    //         return;
    //     }

    //     Logger.LogInformation("User created a new account with password.");

    //     var userId = await UserManager.GetUserIdAsync(user);
    //     var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
    //     code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
    //     var callbackUrl = NavigationManager.GetUriWithQueryParameters(
    //         NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
    //         new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

    //     await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

    //     if (UserManager.Options.SignIn.RequireConfirmedAccount)
    //     {
    //         RedirectManager.RedirectTo(
    //             "Account/RegisterConfirmation",
    //             new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
    //     }

    //     await SignInManager.SignInAsync(user, isPersistent: false);
    //     RedirectManager.RedirectTo(ReturnUrl);
    }

    // private ApplicationUser CreateUser()
    // {
    //     //  try
    //     // {
    //     //     return Activator.CreateInstance<ApplicationUser>();
    //     // }
    //     // catch
    //     // {
    //     //     throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
    //     //         $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
    //     // } 
    // }

    // private IUserEmailStore<ApplicationUser> GetEmailStore()
    // {
    //     // if (!UserManager.SupportsUserEmail)
    //     // {
    //     //     throw new NotSupportedException("The default UI requires a user store with email support.");
    //     // }
    //     // return (IUserEmailStore<ApplicationUser>)UserStore;
    // }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
    // private async Task Login_page()
    // {
    //      NavigationManager.NavigateTo("/Login");
    // }
}
